(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap);"]),i.push([t.id,'* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n#projectContainer > * {\n  font-family: "Press Start 2P", cursive;\n}\n\n#projectContainer {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100dvh;\n  background-color: black;\n  position: relative;\n}\n\n#gitLink {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  padding: 10px;\n  border: 2px solid aquamarine;\n  color: aquamarine;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n}\n\n#subContainer {\n  width: fit-content;\n  height: fit-content;\n  position: relative;\n}\n\n#muteButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background-color: black;\n  width: fit-content;\n  height: fit-content;\n  border-radius: 8px;\n  border: 3px solid aquamarine;\n  cursor: pointer;\n  padding: 4px 8px;\n}\n#muteButton svg {\n  width: 24px;\n  height: 24px;\n}\n\n#helpBox {\n  position: absolute;\n  top: 60%;\n  right: 0;\n  transform: translateX(calc(100% + 10px));\n  height: fit-content;\n  width: 300px;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 16px;\n  padding: 10px;\n  border: 2px solid aquamarine;\n  border-radius: 8px;\n  font-size: 14px;\n}\n.helpRow {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n}\n.helpRow span:nth-child(2) {\n  text-align: center;\n}\n\n#nextPiece {\n  position: absolute;\n  background-color: black;\n  transform: translate(10px, 95px);\n  border: 3px solid aquamarine;\n  border-radius: 8px;\n}\n\n#cornerPause:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n#scoreBoard {\n  border: 3px solid aquamarine;\n  border-radius: 8px;\n  position: absolute;\n  left: 0;\n  bottom: 50%;\n  transform: translate(calc(-100% - 10px), 35%);\n}\n\n#gameOverContainer,\n#startGameContainer,\n#pauseGameContainer {\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -40%);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  color: white;\n  background-color: black;\n  border: 4px solid aquamarine;\n  border-radius: 20px;\n  font-size: 18px;\n  padding: 20px;\n  width: 81%;\n}\n#startGameContainer {\n  background-color: rgba(127, 255, 212, 0.175);\n}\n#gameOverContainer {\n  width: 99%;\n}\n#gameOverContainer span:nth-child(1) {\n  align-self: center;\n}\n\n#playButton,\n#playAgainButton,\n#resumeButton,\n#quitButton {\n  color: white;\n  background-color: black;\n  border: 2px solid aquamarine;\n  padding: 8px 20px;\n  font-size: 16px;\n  border-radius: 3px;\n  font-family: "Press Start 2P", cursive;\n}\n#playAgainButton {\n  align-self: center;\n}\n#playButton:hover,\n#playAgainButton:hover,\n#resumeButton:hover,\n#quitButton:hover {\n  cursor: pointer;\n  background-color: aquamarine;\n  color: black;\n}\n\n@media (max-width: 1015px) {\n  #helpBox {\n    position: absolute;\n    height: 124px;\n    top: 77%;\n    right: 50%;\n    transform: translateX(50%);\n    border: none;\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AACA;EACE,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;AACA;EACE,sCAAsC;AACxC;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,cAAc;EACd,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,aAAa;EACb,4BAA4B;EAC5B,iBAAiB;EACjB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,uBAAuB;EACvB,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,4BAA4B;EAC5B,eAAe;EACf,gBAAgB;AAClB;AACA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,QAAQ;EACR,wCAAwC;EACxC,mBAAmB;EACnB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,SAAS;EACT,aAAa;EACb,4BAA4B;EAC5B,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,aAAa;EACb,8BAA8B;AAChC;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,gCAAgC;EAChC,4BAA4B;EAC5B,kBAAkB;AACpB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,4BAA4B;EAC5B,kBAAkB;EAClB,kBAAkB;EAClB,OAAO;EACP,WAAW;EACX,6CAA6C;AAC/C;;AAEA;;;EAGE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,YAAY;EACZ,uBAAuB;EACvB,4BAA4B;EAC5B,mBAAmB;EACnB,eAAe;EACf,aAAa;EACb,UAAU;AACZ;AACA;EACE,4CAA4C;AAC9C;AACA;EACE,UAAU;AACZ;AACA;EACE,kBAAkB;AACpB;;AAEA;;;;EAIE,YAAY;EACZ,uBAAuB;EACvB,4BAA4B;EAC5B,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAClB,sCAAsC;AACxC;AACA;EACE,kBAAkB;AACpB;AACA;;;;EAIE,eAAe;EACf,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE;IACE,kBAAkB;IAClB,aAAa;IACb,QAAQ;IACR,UAAU;IACV,0BAA0B;IAC1B,YAAY;EACd;AACF",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap");\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n#projectContainer > * {\n  font-family: "Press Start 2P", cursive;\n}\n\n#projectContainer {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100dvh;\n  background-color: black;\n  position: relative;\n}\n\n#gitLink {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  padding: 10px;\n  border: 2px solid aquamarine;\n  color: aquamarine;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n}\n\n#subContainer {\n  width: fit-content;\n  height: fit-content;\n  position: relative;\n}\n\n#muteButton {\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background-color: black;\n  width: fit-content;\n  height: fit-content;\n  border-radius: 8px;\n  border: 3px solid aquamarine;\n  cursor: pointer;\n  padding: 4px 8px;\n}\n#muteButton svg {\n  width: 24px;\n  height: 24px;\n}\n\n#helpBox {\n  position: absolute;\n  top: 60%;\n  right: 0;\n  transform: translateX(calc(100% + 10px));\n  height: fit-content;\n  width: 300px;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 16px;\n  padding: 10px;\n  border: 2px solid aquamarine;\n  border-radius: 8px;\n  font-size: 14px;\n}\n.helpRow {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n}\n.helpRow span:nth-child(2) {\n  text-align: center;\n}\n\n#nextPiece {\n  position: absolute;\n  background-color: black;\n  transform: translate(10px, 95px);\n  border: 3px solid aquamarine;\n  border-radius: 8px;\n}\n\n#cornerPause:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n\n#scoreBoard {\n  border: 3px solid aquamarine;\n  border-radius: 8px;\n  position: absolute;\n  left: 0;\n  bottom: 50%;\n  transform: translate(calc(-100% - 10px), 35%);\n}\n\n#gameOverContainer,\n#startGameContainer,\n#pauseGameContainer {\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -40%);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  color: white;\n  background-color: black;\n  border: 4px solid aquamarine;\n  border-radius: 20px;\n  font-size: 18px;\n  padding: 20px;\n  width: 81%;\n}\n#startGameContainer {\n  background-color: rgba(127, 255, 212, 0.175);\n}\n#gameOverContainer {\n  width: 99%;\n}\n#gameOverContainer span:nth-child(1) {\n  align-self: center;\n}\n\n#playButton,\n#playAgainButton,\n#resumeButton,\n#quitButton {\n  color: white;\n  background-color: black;\n  border: 2px solid aquamarine;\n  padding: 8px 20px;\n  font-size: 16px;\n  border-radius: 3px;\n  font-family: "Press Start 2P", cursive;\n}\n#playAgainButton {\n  align-self: center;\n}\n#playButton:hover,\n#playAgainButton:hover,\n#resumeButton:hover,\n#quitButton:hover {\n  cursor: pointer;\n  background-color: aquamarine;\n  color: black;\n}\n\n@media (max-width: 1015px) {\n  #helpBox {\n    position: absolute;\n    height: 124px;\n    top: 77%;\n    right: 50%;\n    transform: translateX(50%);\n    border: none;\n  }\n}\n'],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(i[u]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var u=t[s],c=r.base?u[0]+r.base:u[0],l=a[c]||0,p="".concat(c," ").concat(l);a[c]=l+1;var d=n(p),f={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var h=o(f,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:h,references:1})}i.push(p)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var u=r(t,o),c=0;c<a.length;c++){var l=n(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=u}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0;var r={};(()=>{n.d(r,{F:()=>Re});var t=n(379),e=n.n(t),o=n(795),a=n.n(o),i=n(569),s=n.n(i),u=n(565),c=n.n(u),l=n(216),p=n.n(l),d=n(589),f=n.n(d),h=n(426),A={};A.styleTagTransform=f(),A.setAttributes=c(),A.insert=s().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=p(),e()(h.Z,A),h.Z&&h.Z.locals&&h.Z.locals;const m=(()=>{function t(){const t=document.createElement("div"),e=document.createElement("span"),n=document.createElement("button");n.id="playButton",t.id="startGameContainer",e.textContent="TETRIS",n.textContent="PLAY",t.appendChild(e),t.appendChild(n),subContainer.appendChild(t)}function e(){const t=document.createElement("div");t.id="helpBox";let e=["Move:","Rotate:","Quick Drop:","Pause/Play:"],n=["Arrows","'z'","'Space'","'Esc'"];for(let r=0;r<e.length;r++){const o=document.createElement("div"),a=document.createElement("span"),i=document.createElement("span");o.classList.add("helpRow"),a.textContent=e[r],i.textContent=n[r],o.appendChild(a),o.appendChild(i),t.appendChild(o)}document.getElementById("subContainer").appendChild(t)}return{displayGameOverPage:function(t){const e=document.createElement("div"),n=document.createElement("span"),r=document.createElement("span"),o=document.createElement("span"),a=document.createElement("button"),i=document.createElement("button");e.id="gameOverContainer",a.id="playAgainButton",i.id="quitButton",n.textContent="Game Over!",r.textContent=`Score: ${t.getScore().toString()}`,null!==localStorage.getItem("highScore")?o.textContent=`High Score: ${localStorage.getItem("highScore")}`:o.textContent=`High Score: ${t.getScore().toString()}`,a.textContent="PLAY AGAIN",i.textContent="QUIT",e.appendChild(n),e.appendChild(r),e.appendChild(o),e.appendChild(a),e.appendChild(i),subContainer.appendChild(e)},displayPausePage:function(){const t=document.createElement("div"),e=document.createElement("span"),n=document.createElement("resumeButton");t.id="pauseGameContainer",n.id="resumeButton",e.textContent="PAUSED",n.textContent="resume",t.appendChild(e),t.appendChild(n),subContainer.appendChild(t)},displayStartPage:t,displayHelpBox:e,toggleMuteButton:function(){const t=document.getElementById("muteButton");t.classList.toggle("on"),t.classList.contains("on")?(t.innerHTML='<svg class="muteClickable" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 16 16"><path class="muteClickable" fill="aquamarine" d="M7.563 2.069A.75.75 0 0 1 8 2.75v10.5a.751.751 0 0 1-1.238.57L3.472 11H1.75A1.75 1.75 0 0 1 0 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 0 1 .801-.111ZM6.5 4.38L4.238 6.319a.748.748 0 0 1-.488.181h-2a.25.25 0 0 0-.25.25v2.5c0 .138.112.25.25.25h2c.179 0 .352.064.488.18L6.5 11.62Zm6.096-2.038a.75.75 0 0 1 1.06 0a8 8 0 0 1 0 11.314a.751.751 0 0 1-1.042-.018a.751.751 0 0 1-.018-1.042a6.5 6.5 0 0 0 0-9.193a.75.75 0 0 1 0-1.06Zm-1.06 2.121l-.001.001a5 5 0 0 1 0 7.07a.749.749 0 0 1-1.275-.326a.749.749 0 0 1 .215-.734a3.5 3.5 0 0 0 0-4.95a.75.75 0 1 1 1.061-1.061Z"/></svg>',Re.muted=!1):(t.innerHTML='<svg class="muteClickable" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path class="muteClickable" fill="aquamarine" d="M12.43 4.1a1 1 0 0 0-1 .12L6.65 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h3.65l4.73 3.78A1 1 0 0 0 12 20a.91.91 0 0 0 .43-.1A1 1 0 0 0 13 19V5a1 1 0 0 0-.57-.9ZM11 16.92l-3.38-2.7A1 1 0 0 0 7 14H4v-4h3a1 1 0 0 0 .62-.22L11 7.08ZM19.91 12l1.8-1.79a1 1 0 0 0-1.42-1.42l-1.79 1.8l-1.79-1.8a1 1 0 0 0-1.42 1.42l1.8 1.79l-1.8 1.79a1 1 0 0 0 0 1.42a1 1 0 0 0 1.42 0l1.79-1.8l1.79 1.8a1 1 0 0 0 1.42 0a1 1 0 0 0 0-1.42Z"/></svg>',Re.muted=!0)},displayStartComponents:function(){t(),e()}}})(),g=document.getElementById("game-canvas"),v=document.getElementById("nextPiece"),y=document.getElementById("scoreBoard");let C=g.getContext("2d"),b=v.getContext("2d"),B=y.getContext("2d"),E=30;const w=["#fbbf24","#22c55e","#0ea5e9","#67e8f9","#e11d48","#d946ef","#f8fafc"];g.width=364,g.height=694,v.width=120,v.height=120,y.width=150,y.height=240;let $=localStorage.getItem("highScore");null===$&&($="0");function x(t){P();let e=t.getCurrentX(),n=t.getCurrentY(),r=t.changeShadowY(),o=t.getCurrentPiece(),a=t.getNextPiece(),i=t.getCurrentRotation(),s=t.getTetromino(o),u=t.getTetromino(a);T(t);for(let c=0;c<4;c++)for(let l=0;l<4;l++){let p=t.Rotate(c,l,i);1===s.get(p)&&(S(c,l,e,n,o),R(t,c,l,e,r,s,o,i)),I(c,l,a,u)}O(t),_()}const P=()=>{C.clearRect(0,0,g.width,g.height),b.clearRect(0,0,v.width,v.height),B.clearRect(0,0,y.width,y.height)};function k(t,e,n,r){C.beginPath(),C.moveTo(t,e),C.lineTo(n,r),C.stroke()}const T=t=>{let e=t.getGameBoard();for(let n=0;n<12;n++)for(let r=0;r<23;r++){const o=12*r+n,a=e.get(o);10===a?C.fillStyle="black":9===a?(C.strokeStyle="black",C.fillStyle="black",C.fillRect(n*E+2,r*E+2,E,E)):(t.getGameOver()?C.strokeStyle="aquamarine":C.strokeStyle="white",C.lineWidth=2,C.strokeRect(n*E+2,r*E+2,E,E)),10!==a&&9!==a&&(C.lineWidth=1,k(n*E+2,r*E+2,(n+1)*E+2,(r+1)*E+2),k(n*E+E+2,r*E+2,n*E+2,r*E+E+2)),C.shadowBlur=0,C.shadowColor="black"}},S=(t,e,n,r,o)=>{C.strokeStyle=w[o],C.lineWidth=3,C.strokeRect((n+t)*E+2,(r+e)*E+2,E,E)},R=(t,e,n,r,o,a,i,s)=>{if(C.strokeStyle=w[i],!t.getGamePaused()&&!t.getGameOver()){const i=n>0?a.get(t.Rotate(e,n-1,s)):0,u=e<3?a.get(t.Rotate(e+1,n,s)):0,c=n<3?a.get(t.Rotate(e,n+1,s)):0,l=e>0?a.get(t.Rotate(e-1,n,s)):0;0===i&&k((r+e)*E+2,(o+n)*E+2,(r+e+1)*E+2,(o+n)*E+2),0===u&&k((r+e+1)*E+2,(o+n)*E+2,(r+e+1)*E+2,(o+n+1)*E+2),0===c&&k((r+e+1)*E+2,(o+n+1)*E+2,(r+e)*E+2,(o+n+1)*E+2),0===l&&k((r+e)*E+2,(o+n+1)*E+2,(r+e)*E+2,(o+n)*E+2)}},I=(t,e,n,r)=>{let o=0,a=0;0===n?(o=0,a=12):1===n?(o=25,a=10):2===n?(o=12,a=13):3===n?(o=10,a=23):4===n?(o=14,a=23):5!==n&&6!==n||(o=10,a=25),1==r.get(4*e+t)&&(b.strokeStyle=w[n],b.lineWidth=2,b.strokeRect(24*t+o,24*e+a,24,24))},O=t=>{B.font='22px "Press Start 2P"',B.fillStyle="aquamarine",B.fillText("TOP",16,y.height/2-40),B.fillText(`${$}`,16,y.height/2-14),B.fillText("SCORE",16,y.height/2+20),B.fillText(`${t.getScore()}`,16,y.height/2+46)},_=()=>{C.strokeStyle="aquamarine",[[2,2,2,692],[32,2,32,662],[362,2,362,692],[332,2,332,662],[2,692,362,692],[32,662,332,662]].forEach((t=>k(...t)))};var j,W=void 0!==W?W:{},F=Object.assign({},W),U="";"undefined"!=typeof document&&document.currentScript&&(U=document.currentScript.src),U=0!==U.indexOf("blob:")?U.substr(0,U.replace(/[?#].*/,"").lastIndexOf("/")+1):"",W.print||console.log.bind(console);var D,q,G=W.printErr||console.error.bind(console);Object.assign(W,F),F=null,W.arguments&&W.arguments,W.thisProgram&&W.thisProgram,W.quit&&W.quit,W.wasmBinary&&(D=W.wasmBinary),W.noExitRuntime,"object"!=typeof WebAssembly&&at("no native wasm support detected");var L,M,H,Z,z,Y,V,N,Q,X=!1;function J(){var t=q.buffer;W.HEAP8=L=new Int8Array(t),W.HEAP16=H=new Int16Array(t),W.HEAP32=z=new Int32Array(t),W.HEAPU8=M=new Uint8Array(t),W.HEAPU16=Z=new Uint16Array(t),W.HEAPU32=Y=new Uint32Array(t),W.HEAPF32=V=new Float32Array(t),W.HEAPF64=N=new Float64Array(t)}var K=[],tt=[],et=[],nt=0,rt=null,ot=null;function at(t){throw W.onAbort&&W.onAbort(t),G(t="Aborted("+t+")"),X=!0,t+=". Build with -sASSERTIONS for more info.",new WebAssembly.RuntimeError(t)}var it,st;function ut(t){return t.startsWith("data:application/octet-stream;base64,")}function ct(t){try{if(t==it&&D)return new Uint8Array(D);if(j)return j(t);throw"both async and sync fetching of the wasm failed"}catch(t){at(t)}}function lt(t,e,n){return function(t){return D||"function"!=typeof fetch?Promise.resolve().then((()=>ct(t))):fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>ct(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(n,(t=>{G("failed to asynchronously prepare wasm: "+t),at(t)}))}function pt(t){for(;t.length>0;)t.shift()(W)}function dt(t){this.excPtr=t,this.ptr=t-24,this.set_type=function(t){Y[this.ptr+4>>2]=t},this.get_type=function(){return Y[this.ptr+4>>2]},this.set_destructor=function(t){Y[this.ptr+8>>2]=t},this.get_destructor=function(){return Y[this.ptr+8>>2]},this.set_caught=function(t){t=t?1:0,L[this.ptr+12>>0]=t},this.get_caught=function(){return 0!=L[this.ptr+12>>0]},this.set_rethrown=function(t){t=t?1:0,L[this.ptr+13>>0]=t},this.get_rethrown=function(){return 0!=L[this.ptr+13>>0]},this.init=function(t,e){this.set_adjusted_ptr(0),this.set_type(t),this.set_destructor(e)},this.set_adjusted_ptr=function(t){Y[this.ptr+16>>2]=t},this.get_adjusted_ptr=function(){return Y[this.ptr+16>>2]},this.get_exception_ptr=function(){if(Pe(this.get_type()))return Y[this.excPtr>>2];var t=this.get_adjusted_ptr();return 0!==t?t:this.excPtr}}function ft(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${t}`)}}ut(it="tetris.wasm")||(st=it,it=W.locateFile?W.locateFile(st,U):U+st);var ht=void 0;function At(t){for(var e="",n=t;M[n];)e+=ht[M[n++]];return e}var mt={},gt={},vt={},yt=48,Ct=57;function bt(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return e>=yt&&e<=Ct?`_${t}`:t}function Bt(t,e){return{[t=bt(t)]:function(){return e.apply(this,arguments)}}[t]}function Et(t,e){var n=Bt(e,(function(t){this.name=e,this.message=t;var n=new Error(t).stack;void 0!==n&&(this.stack=this.toString()+"\n"+n.replace(/^Error(:[^\n]*)?\n/,""))}));return n.prototype=Object.create(t.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},n}var wt=void 0;function $t(t){throw new wt(t)}var xt=void 0;function Pt(t){throw new xt(t)}function kt(t,e,n){function r(e){var r=n(e);r.length!==t.length&&Pt("Mismatched type converter count");for(var o=0;o<t.length;++o)Tt(t[o],r[o])}t.forEach((function(t){vt[t]=e}));var o=new Array(e.length),a=[],i=0;e.forEach(((t,e)=>{gt.hasOwnProperty(t)?o[e]=gt[t]:(a.push(t),mt.hasOwnProperty(t)||(mt[t]=[]),mt[t].push((()=>{o[e]=gt[t],++i===a.length&&r(o)})))})),0===a.length&&r(o)}function Tt(t,e,n={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");var r=e.name;if(t||$t(`type "${r}" must have a positive integer typeid pointer`),gt.hasOwnProperty(t)){if(n.ignoreDuplicateRegistrations)return;$t(`Cannot register type '${r}' twice`)}if(gt[t]=e,delete vt[t],mt.hasOwnProperty(t)){var o=mt[t];delete mt[t],o.forEach((t=>t()))}}function St(t){$t(t.$$.ptrType.registeredClass.name+" instance already deleted")}var Rt=!1;function It(t){}function Ot(t){t.count.value-=1,0===t.count.value&&function(t){t.smartPtr?t.smartPtrType.rawDestructor(t.smartPtr):t.ptrType.registeredClass.rawDestructor(t.ptr)}(t)}function _t(t,e,n){if(e===n)return t;if(void 0===n.baseClass)return null;var r=_t(t,e,n.baseClass);return null===r?null:n.downcast(r)}var jt={};var Wt=[];function Ft(){for(;Wt.length;){var t=Wt.pop();t.$$.deleteScheduled=!1,t.delete()}}var Ut=void 0;var Dt={};function qt(t,e){return e.ptrType&&e.ptr||Pt("makeClassHandle requires ptr and ptrType"),!!e.smartPtrType!=!!e.smartPtr&&Pt("Both smartPtrType and smartPtr must be specified"),e.count={value:1},Gt(Object.create(t,{$$:{value:e}}))}function Gt(t){return"undefined"==typeof FinalizationRegistry?(Gt=t=>t,t):(Rt=new FinalizationRegistry((t=>{Ot(t.$$)})),Gt=t=>{var e=t.$$;if(e.smartPtr){var n={$$:e};Rt.register(t,n,t)}return t},It=t=>Rt.unregister(t),Gt(t))}function Lt(){}function Mt(t,e,n){if(void 0===t[e].overloadTable){var r=t[e];t[e]=function(){return t[e].overloadTable.hasOwnProperty(arguments.length)||$t(`Function '${n}' called with an invalid number of arguments (${arguments.length}) - expects one of (${t[e].overloadTable})!`),t[e].overloadTable[arguments.length].apply(this,arguments)},t[e].overloadTable=[],t[e].overloadTable[r.argCount]=r}}function Ht(t,e,n,r,o,a,i,s){this.name=t,this.constructor=e,this.instancePrototype=n,this.rawDestructor=r,this.baseClass=o,this.getActualType=a,this.upcast=i,this.downcast=s,this.pureVirtualFunctions=[]}function Zt(t,e,n){for(;e!==n;)e.upcast||$t(`Expected null or instance of ${n.name}, got an instance of ${e.name}`),t=e.upcast(t),e=e.baseClass;return t}function zt(t,e){if(null===e)return this.isReference&&$t(`null is not a valid ${this.name}`),0;e.$$||$t(`Cannot pass "${ce(e)}" as a ${this.name}`),e.$$.ptr||$t(`Cannot pass deleted object as a pointer of type ${this.name}`);var n=e.$$.ptrType.registeredClass;return Zt(e.$$.ptr,n,this.registeredClass)}function Yt(t,e){var n;if(null===e)return this.isReference&&$t(`null is not a valid ${this.name}`),this.isSmartPointer?(n=this.rawConstructor(),null!==t&&t.push(this.rawDestructor,n),n):0;e.$$||$t(`Cannot pass "${ce(e)}" as a ${this.name}`),e.$$.ptr||$t(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.isConst&&e.$$.ptrType.isConst&&$t(`Cannot convert argument of type ${e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name} to parameter type ${this.name}`);var r=e.$$.ptrType.registeredClass;if(n=Zt(e.$$.ptr,r,this.registeredClass),this.isSmartPointer)switch(void 0===e.$$.smartPtr&&$t("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:e.$$.smartPtrType===this?n=e.$$.smartPtr:$t(`Cannot convert argument of type ${e.$$.smartPtrType?e.$$.smartPtrType.name:e.$$.ptrType.name} to parameter type ${this.name}`);break;case 1:n=e.$$.smartPtr;break;case 2:if(e.$$.smartPtrType===this)n=e.$$.smartPtr;else{var o=e.clone();n=this.rawShare(n,ue.toHandle((function(){o.delete()}))),null!==t&&t.push(this.rawDestructor,n)}break;default:$t("Unsupporting sharing policy")}return n}function Vt(t,e){if(null===e)return this.isReference&&$t(`null is not a valid ${this.name}`),0;e.$$||$t(`Cannot pass "${ce(e)}" as a ${this.name}`),e.$$.ptr||$t(`Cannot pass deleted object as a pointer of type ${this.name}`),e.$$.ptrType.isConst&&$t(`Cannot convert argument of type ${e.$$.ptrType.name} to parameter type ${this.name}`);var n=e.$$.ptrType.registeredClass;return Zt(e.$$.ptr,n,this.registeredClass)}function Nt(t){return this.fromWireType(z[t>>2])}function Qt(t,e,n,r,o,a,i,s,u,c,l){this.name=t,this.registeredClass=e,this.isReference=n,this.isConst=r,this.isSmartPointer=o,this.pointeeType=a,this.sharingPolicy=i,this.rawGetPointee=s,this.rawConstructor=u,this.rawShare=c,this.rawDestructor=l,o||void 0!==e.baseClass?this.toWireType=Yt:r?(this.toWireType=zt,this.destructorFunction=null):(this.toWireType=Vt,this.destructorFunction=null)}var Xt=[];function Jt(t){var e=Xt[t];return e||(t>=Xt.length&&(Xt.length=t+1),Xt[t]=e=Q.get(t)),e}function Kt(t,e){var n,r,o,a=(t=At(t)).includes("j")?(n=t,r=e,o=[],function(){return o.length=0,Object.assign(o,arguments),function(t,e,n){return t.includes("j")?function(t,e,n){var r=W["dynCall_"+t];return n&&n.length?r.apply(null,[e].concat(n)):r.call(null,e)}(t,e,n):Jt(e).apply(null,n)}(n,r,o)}):Jt(e);return"function"!=typeof a&&$t(`unknown function pointer with signature ${t}: ${e}`),a}var te=void 0;function ee(t){var e=we(t),n=At(e);return xe(e),n}function ne(t,e){var n=[],r={};throw e.forEach((function t(e){r[e]||gt[e]||(vt[e]?vt[e].forEach(t):(n.push(e),r[e]=!0))})),new te(`${t}: `+n.map(ee).join([", "]))}function re(t,e){for(var n=[],r=0;r<t;r++)n.push(Y[e+4*r>>2]);return n}function oe(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function ae(t,e,n,r,o,a){var i=e.length;i<2&&$t("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var s=null!==e[1]&&null!==n,u=!1,c=1;c<e.length;++c)if(null!==e[c]&&void 0===e[c].destructorFunction){u=!0;break}var l="void"!==e[0].name,p="",d="";for(c=0;c<i-2;++c)p+=(0!==c?", ":"")+"arg"+c,d+=(0!==c?", ":"")+"arg"+c+"Wired";var f=`\n        return function ${bt(t)}(${p}) {\n        if (arguments.length !== ${i-2}) {\n          throwBindingError('function ${t} called with ${arguments.length} arguments, expected ${i-2} args!');\n        }`;u&&(f+="var destructors = [];\n");var h=u?"destructors":"null",A=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],m=[$t,r,o,oe,e[0],e[1]];for(s&&(f+="var thisWired = classParam.toWireType("+h+", this);\n"),c=0;c<i-2;++c)f+="var arg"+c+"Wired = argType"+c+".toWireType("+h+", arg"+c+"); // "+e[c+2].name+"\n",A.push("argType"+c),m.push(e[c+2]);if(s&&(d="thisWired"+(d.length>0?", ":"")+d),f+=(l||a?"var rv = ":"")+"invoker(fn"+(d.length>0?", ":"")+d+");\n",u)f+="runDestructors(destructors);\n";else for(c=s?1:2;c<e.length;++c){var g=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==e[c].destructorFunction&&(f+=g+"_dtor("+g+"); // "+e[c].name+"\n",A.push(g+"_dtor"),m.push(e[c].destructorFunction))}return l&&(f+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),f+="}\n",A.push(f),function(t,e){if(!(t instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof t} which is not a function`);var n=Bt(t.name||"unknownFunctionName",(function(){}));n.prototype=t.prototype;var r=new n,o=t.apply(r,e);return o instanceof Object?o:r}(Function,A).apply(null,m)}var ie=new function(){this.allocated=[void 0],this.freelist=[],this.get=function(t){return this.allocated[t]},this.has=function(t){return void 0!==this.allocated[t]},this.allocate=function(t){var e=this.freelist.pop()||this.allocated.length;return this.allocated[e]=t,e},this.free=function(t){this.allocated[t]=void 0,this.freelist.push(t)}};function se(t){t>=ie.reserved&&0==--ie.get(t).refcount&&ie.free(t)}var ue={toValue:t=>(t||$t("Cannot use deleted val. handle = "+t),ie.get(t).value),toHandle:t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ie.allocate({refcount:1,value:t})}}};function ce(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function le(t,e){switch(e){case 2:return function(t){return this.fromWireType(V[t>>2])};case 3:return function(t){return this.fromWireType(N[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function pe(t,e,n){switch(e){case 0:return n?function(t){return L[t]}:function(t){return M[t]};case 1:return n?function(t){return H[t>>1]}:function(t){return Z[t>>1]};case 2:return n?function(t){return z[t>>2]}:function(t){return Y[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var de="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;var fe="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function he(t,e){for(var n=t,r=n>>1,o=r+e/2;!(r>=o)&&Z[r];)++r;if((n=r<<1)-t>32&&fe)return fe.decode(M.subarray(t,n));for(var a="",i=0;!(i>=e/2);++i){var s=H[t+2*i>>1];if(0==s)break;a+=String.fromCharCode(s)}return a}function Ae(t,e,n){if(void 0===n&&(n=2147483647),n<2)return 0;for(var r=e,o=(n-=2)<2*t.length?n/2:t.length,a=0;a<o;++a){var i=t.charCodeAt(a);H[e>>1]=i,e+=2}return H[e>>1]=0,e-r}function me(t){return 2*t.length}function ge(t,e){for(var n=0,r="";!(n>=e/4);){var o=z[t+4*n>>2];if(0==o)break;if(++n,o>=65536){var a=o-65536;r+=String.fromCharCode(55296|a>>10,56320|1023&a)}else r+=String.fromCharCode(o)}return r}function ve(t,e,n){if(void 0===n&&(n=2147483647),n<4)return 0;for(var r=e,o=r+n-4,a=0;a<t.length;++a){var i=t.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&t.charCodeAt(++a)),z[e>>2]=i,(e+=4)+4>o)break}return z[e>>2]=0,e-r}function ye(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);r>=55296&&r<=57343&&++n,e+=4}return e}function Ce(t){var e=t-q.buffer.byteLength+65535>>>16;try{return q.grow(e),J(),1}catch(t){}}function be(t){return(be=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return t=>crypto.getRandomValues(t);at("initRandomDevice")}())(t)}!function(){for(var t=new Array(256),e=0;e<256;++e)t[e]=String.fromCharCode(e);ht=t}(),wt=W.BindingError=Et(Error,"BindingError"),xt=W.InternalError=Et(Error,"InternalError"),Lt.prototype.isAliasOf=function(t){if(!(this instanceof Lt))return!1;if(!(t instanceof Lt))return!1;for(var e=this.$$.ptrType.registeredClass,n=this.$$.ptr,r=t.$$.ptrType.registeredClass,o=t.$$.ptr;e.baseClass;)n=e.upcast(n),e=e.baseClass;for(;r.baseClass;)o=r.upcast(o),r=r.baseClass;return e===r&&n===o},Lt.prototype.clone=function(){if(this.$$.ptr||St(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var t,e=Gt(Object.create(Object.getPrototypeOf(this),{$$:{value:(t=this.$$,{count:t.count,deleteScheduled:t.deleteScheduled,preservePointerOnDelete:t.preservePointerOnDelete,ptr:t.ptr,ptrType:t.ptrType,smartPtr:t.smartPtr,smartPtrType:t.smartPtrType})}}));return e.$$.count.value+=1,e.$$.deleteScheduled=!1,e},Lt.prototype.delete=function(){this.$$.ptr||St(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&$t("Object already scheduled for deletion"),It(this),Ot(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},Lt.prototype.isDeleted=function(){return!this.$$.ptr},Lt.prototype.deleteLater=function(){return this.$$.ptr||St(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&$t("Object already scheduled for deletion"),Wt.push(this),1===Wt.length&&Ut&&Ut(Ft),this.$$.deleteScheduled=!0,this},W.getInheritedInstanceCount=function(){return Object.keys(Dt).length},W.getLiveInheritedInstances=function(){var t=[];for(var e in Dt)Dt.hasOwnProperty(e)&&t.push(Dt[e]);return t},W.flushPendingDeletes=Ft,W.setDelayFunction=function(t){Ut=t,Wt.length&&Ut&&Ut(Ft)},Qt.prototype.getPointee=function(t){return this.rawGetPointee&&(t=this.rawGetPointee(t)),t},Qt.prototype.destructor=function(t){this.rawDestructor&&this.rawDestructor(t)},Qt.prototype.argPackAdvance=8,Qt.prototype.readValueFromPointer=Nt,Qt.prototype.deleteObject=function(t){null!==t&&t.delete()},Qt.prototype.fromWireType=function(t){var e=this.getPointee(t);if(!e)return this.destructor(t),null;var n=function(t,e){return e=function(t,e){for(void 0===e&&$t("ptr should not be undefined");t.baseClass;)e=t.upcast(e),t=t.baseClass;return e}(t,e),Dt[e]}(this.registeredClass,e);if(void 0!==n){if(0===n.$$.count.value)return n.$$.ptr=e,n.$$.smartPtr=t,n.clone();var r=n.clone();return this.destructor(t),r}function o(){return this.isSmartPointer?qt(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:e,smartPtrType:this,smartPtr:t}):qt(this.registeredClass.instancePrototype,{ptrType:this,ptr:t})}var a,i=this.registeredClass.getActualType(e),s=jt[i];if(!s)return o.call(this);a=this.isConst?s.constPointerType:s.pointerType;var u=_t(e,this.registeredClass,a.registeredClass);return null===u?o.call(this):this.isSmartPointer?qt(a.registeredClass.instancePrototype,{ptrType:a,ptr:u,smartPtrType:this,smartPtr:t}):qt(a.registeredClass.instancePrototype,{ptrType:a,ptr:u})},te=W.UnboundTypeError=Et(Error,"UnboundTypeError"),ie.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),ie.reserved=ie.allocated.length,W.count_emval_handles=function(){for(var t=0,e=ie.reserved;e<ie.allocated.length;++e)void 0!==ie.allocated[e]&&++t;return t};var Be,Ee={g:function(t,e,n){throw new dt(t).init(e,n),t},p:function(t,e,n,r,o){},l:function(t,e,n,r,o){var a=ft(n);Tt(t,{name:e=At(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?r:o},argPackAdvance:8,readValueFromPointer:function(t){var r;if(1===n)r=L;else if(2===n)r=H;else{if(4!==n)throw new TypeError("Unknown boolean type size: "+e);r=z}return this.fromWireType(r[t>>a])},destructorFunction:null})},f:function(t,e,n,r,o,a,i,s,u,c,l,p,d){l=At(l),a=Kt(o,a),s&&(s=Kt(i,s)),c&&(c=Kt(u,c)),d=Kt(p,d);var f=bt(l);!function(t,e,n){W.hasOwnProperty(t)?($t(`Cannot register public name '${t}' twice`),Mt(W,t,t),W.hasOwnProperty(n)&&$t("Cannot register multiple overloads of a function with the same number of arguments (undefined)!"),W[t].overloadTable[void 0]=e):W[t]=e}(f,(function(){ne(`Cannot construct ${l} due to unbound types`,[r])})),kt([t,e,n],r?[r]:[],(function(e){var n,o;e=e[0],o=r?(n=e.registeredClass).instancePrototype:Lt.prototype;var i=Bt(f,(function(){if(Object.getPrototypeOf(this)!==u)throw new wt("Use 'new' to construct "+l);if(void 0===p.constructor_body)throw new wt(l+" has no accessible constructor");var t=p.constructor_body[arguments.length];if(void 0===t)throw new wt(`Tried to invoke ctor of ${l} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(p.constructor_body).toString()}) parameters instead!`);return t.apply(this,arguments)})),u=Object.create(o,{constructor:{value:i}});i.prototype=u;var p=new Ht(l,i,u,d,n,a,s,c);p.baseClass&&(void 0===p.baseClass.__derivedClasses&&(p.baseClass.__derivedClasses=[]),p.baseClass.__derivedClasses.push(p));var h=new Qt(l,p,!0,!1,!1),A=new Qt(l+"*",p,!1,!1,!1),m=new Qt(l+" const*",p,!1,!0,!1);return jt[t]={pointerType:A,constPointerType:m},function(t,e,n){W.hasOwnProperty(t)||Pt("Replacing nonexistant public symbol"),W[t].overloadTable,W[t]=e,W[t].argCount=n}(f,i),[h,A,m]}))},e:function(t,e,n,r,o,a){e>0||at(undefined);var i=re(e,n);o=Kt(r,o),kt([],[t],(function(t){var n=`constructor ${(t=t[0]).name}`;if(void 0===t.registeredClass.constructor_body&&(t.registeredClass.constructor_body=[]),void 0!==t.registeredClass.constructor_body[e-1])throw new wt(`Cannot register multiple constructors with identical number of parameters (${e-1}) for class '${t.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return t.registeredClass.constructor_body[e-1]=()=>{ne(`Cannot construct ${t.name} due to unbound types`,i)},kt([],i,(function(r){return r.splice(1,0,null),t.registeredClass.constructor_body[e-1]=ae(n,r,null,o,a),[]})),[]}))},a:function(t,e,n,r,o,a,i,s,u){var c=re(n,r);e=At(e),a=Kt(o,a),kt([],[t],(function(t){var r=`${(t=t[0]).name}.${e}`;function o(){ne(`Cannot call ${r} due to unbound types`,c)}e.startsWith("@@")&&(e=Symbol[e.substring(2)]),s&&t.registeredClass.pureVirtualFunctions.push(e);var l=t.registeredClass.instancePrototype,p=l[e];return void 0===p||void 0===p.overloadTable&&p.className!==t.name&&p.argCount===n-2?(o.argCount=n-2,o.className=t.name,l[e]=o):(Mt(l,e,r),l[e].overloadTable[n-2]=o),kt([],c,(function(o){var s=ae(r,o,t,a,i,u);return void 0===l[e].overloadTable?(s.argCount=n-2,l[e]=s):l[e].overloadTable[n-2]=s,[]})),[]}))},t:function(t,e){Tt(t,{name:e=At(e),fromWireType:function(t){var e=ue.toValue(t);return se(t),e},toWireType:function(t,e){return ue.toHandle(e)},argPackAdvance:8,readValueFromPointer:Nt,destructorFunction:null})},k:function(t,e,n){var r=ft(n);Tt(t,{name:e=At(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:le(e,r),destructorFunction:null})},c:function(t,e,n,r,o){e=At(e),-1===o&&(o=4294967295);var a=ft(n),i=t=>t;if(0===r){var s=32-8*n;i=t=>t<<s>>>s}var u=e.includes("unsigned");Tt(t,{name:e,fromWireType:i,toWireType:u?function(t,e){return this.name,e>>>0}:function(t,e){return this.name,e},argPackAdvance:8,readValueFromPointer:pe(e,a,0!==r),destructorFunction:null})},b:function(t,e,n){var r=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];function o(t){var e=Y,n=e[t>>=2],o=e[t+1];return new r(e.buffer,o,n)}Tt(t,{name:n=At(n),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},j:function(t,e){var n="std::string"===(e=At(e));Tt(t,{name:e,fromWireType:function(t){var e,r,o,a=Y[t>>2],i=t+4;if(n)for(var s=i,u=0;u<=a;++u){var c=i+u;if(u==a||0==M[c]){var l=(o=c-s,(r=s)?function(t,e,n){for(var r=e+n,o=e;t[o]&&!(o>=r);)++o;if(o-e>16&&t.buffer&&de)return de.decode(t.subarray(e,o));for(var a="";e<o;){var i=t[e++];if(128&i){var s=63&t[e++];if(192!=(224&i)){var u=63&t[e++];if((i=224==(240&i)?(15&i)<<12|s<<6|u:(7&i)<<18|s<<12|u<<6|63&t[e++])<65536)a+=String.fromCharCode(i);else{var c=i-65536;a+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else a+=String.fromCharCode((31&i)<<6|s)}else a+=String.fromCharCode(i)}return a}(M,r,o):"");void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),s=c+1}}else{var p=new Array(a);for(u=0;u<a;++u)p[u]=String.fromCharCode(M[i+u]);e=p.join("")}return xe(t),e},toWireType:function(t,e){var r;e instanceof ArrayBuffer&&(e=new Uint8Array(e));var o="string"==typeof e;o||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||$t("Cannot pass non-string to std::string"),r=n&&o?function(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);r<=127?e++:r<=2047?e+=2:r>=55296&&r<=57343?(e+=4,++n):e+=3}return e}(e):e.length;var a=$e(4+r+1),i=a+4;if(Y[a>>2]=r,n&&o)!function(t,e,n,r){if(!(r>0))return 0;for(var o=n+r-1,a=0;a<t.length;++a){var i=t.charCodeAt(a);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&t.charCodeAt(++a)),i<=127){if(n>=o)break;e[n++]=i}else if(i<=2047){if(n+1>=o)break;e[n++]=192|i>>6,e[n++]=128|63&i}else if(i<=65535){if(n+2>=o)break;e[n++]=224|i>>12,e[n++]=128|i>>6&63,e[n++]=128|63&i}else{if(n+3>=o)break;e[n++]=240|i>>18,e[n++]=128|i>>12&63,e[n++]=128|i>>6&63,e[n++]=128|63&i}}e[n]=0}(e,M,i,r+1);else if(o)for(var s=0;s<r;++s){var u=e.charCodeAt(s);u>255&&(xe(i),$t("String has UTF-16 code units that do not fit in 8 bits")),M[i+s]=u}else for(s=0;s<r;++s)M[i+s]=e[s];return null!==t&&t.push(xe,a),a},argPackAdvance:8,readValueFromPointer:Nt,destructorFunction:function(t){xe(t)}})},d:function(t,e,n){var r,o,a,i,s;n=At(n),2===e?(r=he,o=Ae,i=me,a=()=>Z,s=1):4===e&&(r=ge,o=ve,i=ye,a=()=>Y,s=2),Tt(t,{name:n,fromWireType:function(t){for(var n,o=Y[t>>2],i=a(),u=t+4,c=0;c<=o;++c){var l=t+4+c*e;if(c==o||0==i[l>>s]){var p=r(u,l-u);void 0===n?n=p:(n+=String.fromCharCode(0),n+=p),u=l+e}}return xe(t),n},toWireType:function(t,r){"string"!=typeof r&&$t(`Cannot pass non-string to C++ string type ${n}`);var a=i(r),u=$e(4+a+e);return Y[u>>2]=a>>s,o(r,u+4,a+e),null!==t&&t.push(xe,u),u},argPackAdvance:8,readValueFromPointer:Nt,destructorFunction:function(t){xe(t)}})},m:function(t,e){Tt(t,{isVoid:!0,name:e=At(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(t,e){}})},n:se,o:function(t){t>4&&(ie.get(t).refcount+=1)},h:function(t,e){var n,r;void 0===(r=gt[n=t])&&$t("_emval_take_value has unknown type "+ee(n));var o=(t=r).readValueFromPointer(e);return ue.toHandle(o)},i:function(){at("")},s:function(t,e,n){M.copyWithin(t,e,e+n)},r:function(t){var e=M.length,n=2147483648;if((t>>>=0)>n)return!1;for(var r,o=1;o<=4;o*=2){var a=e*(1+.2/o);if(a=Math.min(a,t+100663296),Ce(Math.min(n,(r=Math.max(t,a))+(65536-r%65536)%65536)))return!0}return!1},q:function(t,e){return be(M.subarray(t,t+e)),0}},we=(function(){var t,e,n,r={a:Ee};function o(t,e){var n,r=t.exports;return W.asm=r,q=W.asm.u,J(),Q=W.asm.w,n=W.asm.v,tt.unshift(n),function(t){if(nt--,W.monitorRunDependencies&&W.monitorRunDependencies(nt),0==nt&&(null!==rt&&(clearInterval(rt),rt=null),ot)){var e=ot;ot=null,e()}}(),r}if(nt++,W.monitorRunDependencies&&W.monitorRunDependencies(nt),W.instantiateWasm)try{return W.instantiateWasm(r,o)}catch(t){return G("Module.instantiateWasm callback failed with error: "+t),!1}t=it,e=r,n=function(t){o(t.instance)},D||"function"!=typeof WebAssembly.instantiateStreaming||ut(t)||"function"!=typeof fetch?lt(t,e,n):fetch(t,{credentials:"same-origin"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(n,(function(r){return G("wasm streaming compile failed: "+r),G("falling back to ArrayBuffer instantiation"),lt(t,e,n)}))))}(),function(){return(we=W.asm.x).apply(null,arguments)}),$e=(W.__embind_initialize_bindings=function(){return(W.__embind_initialize_bindings=W.asm.y).apply(null,arguments)},function(){return($e=W.asm.z).apply(null,arguments)}),xe=function(){return(xe=W.asm.A).apply(null,arguments)},Pe=function(){return(Pe=W.asm.B).apply(null,arguments)};function ke(){function t(){Be||(Be=!0,W.calledRun=!0,X||(pt(tt),W.onRuntimeInitialized&&W.onRuntimeInitialized(),function(){if(W.postRun)for("function"==typeof W.postRun&&(W.postRun=[W.postRun]);W.postRun.length;)t=W.postRun.shift(),et.unshift(t);var t;pt(et)}()))}nt>0||(function(){if(W.preRun)for("function"==typeof W.preRun&&(W.preRun=[W.preRun]);W.preRun.length;)t=W.preRun.shift(),K.unshift(t);var t;pt(K)}(),nt>0||(W.setStatus?(W.setStatus("Running..."),setTimeout((function(){setTimeout((function(){W.setStatus("")}),1),t()}),1)):t()))}if(ot=function t(){Be||ke(),Be||(ot=t)},W.preInit)for("function"==typeof W.preInit&&(W.preInit=[W.preInit]);W.preInit.length>0;)W.preInit.pop()();ke();const Te=n.p+"819f444fda995193e9bc97860ee43890.mp3",Se=n.p+"d735670017a3489d654560cd2d3e1f5e.mp3",Re=new Audio(Te),Ie=new Audio(Se);Re.preload="auto",Ie.preload="auto",Re.loop=!0,Re.volume=.1,Ie.volume=.1,W.onRuntimeInitialized=async function(){let t=new W.Game;t.lastTick=Date.now(),t.gameLoop=function(){let t=Date.now();t-this.lastTick>=this.getDropInterval()&&!this.getGamePaused()&&(this.update(),this.lastTick=t),x(this),this.getGameOver()?(function(t){t.getScore()>$&&($=t.getScore(),localStorage.setItem("highScore",$))}(this),Re.pause(),Ie.play(),m.displayGameOverPage(this)):requestAnimationFrame(this.gameLoop.bind(this))}.bind(t),(t=>{const e=document.getElementById("projectContainer");document.addEventListener("keypress",(function(e){"KeyZ"===e.code&&t.rotateTetromino(-1)})),document.addEventListener("keydown",(function(e){switch(e.code){case"ArrowLeft":t.moveTetromino(0);break;case"ArrowRight":t.moveTetromino(1);break;case"ArrowDown":t.moveTetromino(2);break;case"Space":t.moveTetromino(3);break;case"Escape":if(document.getElementById("startGameContainer")||document.getElementById("gameOverContainer"))return;document.getElementById("pauseGameContainer")?document.getElementById("pauseGameContainer")&&(t.resumeGame(),Re.play(),document.getElementById("pauseGameContainer").remove()):(t.pauseGame(),Re.pause(),m.displayPausePage())}})),e.addEventListener("click",(e=>{"playButton"==e.target.id&&(t.resumeGame(),t.gameLoop(),document.getElementById("startGameContainer").remove(),document.getElementById("helpBox").remove(),Re.oncanplaythrough=function(){Re.play().catch((function(t){console.error("Failed to play audio:",t)}))},Re.currentTime=0),"playAgainButton"==e.target.id&&(t.restartGame(),document.getElementById("gameOverContainer").remove(),Re.currentTime=0,Re.play(),t.gameLoop()),"quitButton"===e.target.id&&(document.getElementById("gameOverContainer").remove(),m.displayStartPage(),m.displayHelpBox(),t.restartGame(),t.pauseGame(),x(t)),"resumeButton"==e.target.id&&(t.resumeGame(),document.getElementById("pauseGameContainer").remove(),Re.play())}));const n=document.getElementById("muteButton");n.addEventListener("click",(t=>{("muteButton"===t.target.id||t.target.classList.contains("muteClickable"))&&(m.toggleMuteButton(),n.blur())}))})(t),x(t),m.displayStartComponents()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,